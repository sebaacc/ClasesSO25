## Salidas Estandar  

Salida Estándar (stdout) / std out 1  //Es el flujo de salida predeterminado para la información normal y los resultados de un programa. Cuando un programa imprime algo sin especificar un destino, generalmente se dirige a la salida estándar.Por defecto, la salida estándar de un comando se muestra directamente en la ventana de la terminal.  
Entrada Estándar (stdin) / std in 0   // Aunque no es una salida, es fundamental para la interacción con los programas desde la terminal. La entrada estándar es el flujo de datos que un programa recibe. Por defecto, proviene del teclado. Los programas que esperan entrada del usuario la leen desde la entrada estándar.  
Error Estándar (stderr) / std error 2  //Está diseñado para mostrar mensajes de error, diagnósticos y otra información que indica problemas durante la ejecución de un programa. Separar los errores de la salida normal facilita la depuración y el manejo de errores en scripts.Por defecto, el error estándar también se muestra en la ventana de la terminal, mezclado con la salida estándar.  

```
ls -l 1 > fichero1.txt
```  

// el 1 està implìcito. NO es necesario utilizarlo.   

Cuando se le vuelve a indicar el mismo se sobreescribe el archivo con los nuevos datos (sobreescribir accidentalmente datos, conocido como "Clobbering").
Append: concatenar cosas. Por ejemplo con:   

```
cat fichero 1
```   
Cuando se creó el archivo pesaba 0bytes, cuando se pone el comando ls -l del inicio, el valor real todavía estaba en el buffer. Luego cuando se invoca por segunda vez el comando ya aparece el dato real, pesando 912 bytes.  
```
ls -l >> redirecinSalidaEstandar.txt  
echo "El contenido del texto ...." >> RedirecionSalidaEstandar.txt  
cat RedirecionSalidaEstandar.txt  
```  
Esto ">>" imposibilita el clobbering, así no se sobreescribe el archivo.  

Se pueden combinar comandos de esta forma:  
```
cat fichero1.txt RedirecionSalidaEstandar.txt NoExiste.txt > salidaError.txt 2>&1
```  
En el contexto de la terminal de Linux (y otros sistemas Unix-like), 2>&1 es una redirección del error estándar (stderr) a la misma ubicación que la salida estándar (stdout). Vamos a desglosarlo:  

2: Representa el descriptor de archivo asociado con el error estándar (stderr). En los sistemas Unix, a cada flujo de entrada/salida se le asigna un número de descriptor. El 0 es para la entrada estándar (stdin), el 1 para la salida estándar (stdout), y el 2 para el error estándar (stderr).  

>: Normalmente, este símbolo se utiliza para redirigir la salida. Cuando se usa solo con un descriptor de archivo (como 2>), redirige ese flujo a un archivo específico.  

&1: Aquí, el & antes del 1 es importante. Indica que no se está redirigiendo al archivo llamado "1", sino que se está redirigiendo al mismo destino al que apunta el descriptor de archivo número 1 (stdout) en ese momento.  

En resumen, 2>&1 toma todo lo que normalmente se enviaría al error estándar y lo dirige al mismo lugar donde se está enviando la salida estándar.

